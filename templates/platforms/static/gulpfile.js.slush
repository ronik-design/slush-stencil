var Gulp = require('gulp'),
    Url = require('url'),
    Webpack = require('webpack'),
    WebpackDevServer = require('webpack-dev-server'),
    Util = require('gulp-util'),
    log = Util.log,
    Path = require('path'),
    Fs = require('fs'),
    Glob = require('glob'),
    AwsPublish = require('gulp-awspublish'),
    Notify = require('gulp-notify'),
    s3Website = require('s3-website'),
    watch = require('gulp-watch'),
    swig = require('gulp-swig'),
    data = require('gulp-data'),
    touch = require('touch'),
    assign = require('101/assign');

var STAGE_BUCKET = 'stage.<%= domain %>';
var PROD_BUCKET = '<%= domain %>';
var BUILD_DIR = '<%= buildDir %>';
var PORT = Util.env.port || 8080;
var HOST = 'localhost';

var watching = false;
var devServer = {};
var buildDir = Path.resolve(__dirname, BUILD_DIR);

require('./tasks/gulp-tasks-common')(buildDir, devServer);

var getJsonData = function(file) {
    var jsonData;

    try {
        var basename = Path.basename(file.path, Path.extname(file.path));
        jsonData = require('./data/' + basename + '.json');
    } catch(e) {}

    return jsonData;
};

var getJsonGlobals = function () {
    var globals = {};
    var fileGlobs = Glob.sync('./data/**/_*.json');
    fileGlobs.forEach(function(fileGlob) {
        var prop = Path.basename(fileGlob).replace('.json', '');
        globals[prop] = getJsonData({ path: fileGlob });
    });
    return globals;
};

Gulp.task('templates', function() {
    var jsonGlobals = getJsonGlobals();
    var globals = assign(jsonGlobals, { '__DEV__': watching });

    var opts = {
        defaults: {
            cache: false,
            locals: globals
        }
    };

    return Gulp.src('./templates/**/*.html')
        .pipe(data(getJsonData))
        .on('error', Notify.onError())
        .pipe(swig(opts))
        .on('error', Notify.onError())
        .pipe(Gulp.dest(buildDir));
});

Gulp.task('s3-deploy', ['build', 's3-deploy-config'], function() {
    var publisher = AwsPublish.create({
        bucket: STAGE_BUCKET
    });
    var headers = {
        'Cache-Control': 'max-age=315360000, no-transform, public'
    };

    return Gulp.src('.build/**/*')
        .pipe(AwsPublish.gzip())
        .pipe(publisher.publish(headers))
        .pipe(publisher.sync())
        .pipe(publisher.cache())
        .pipe(AwsPublish.reporter());
});

Gulp.task('s3-deploy-config', function(cb) {
    var s3Config = {
        domain: STAGE_BUCKET,
        index: 'index.html',
        error: 'error.html'
    };

    s3Website(s3Config, function(err, website) {
        if (err) {
            Notify.onError(err);
        }

        if (website.modified) {
            log('[deploy-s3-config]',
                'Site configuration updated %s',
                website.url);
        }
        cb(err);
    });
});

Gulp.task('watch:local', [
        'watch-start',
        'templates',
        'watch:common'],
    function(cb) {
        watch('./templates/**/*.html', function() {
            Gulp.start('templates');
        });

        cb();
    }
);

Gulp.task('webpack-dev-server', ['watch:local'], function(cb) {

    touch.sync(buildDir + '/css/main.css', {
        time: new Date(0)
    });

    var config = require('./webpack.config.js');

    devServer = new WebpackDevServer(Webpack(config), {
        contentBase: buildDir,
        hot: true,
        watchDelay: 100,
        noInfo: true,
        publicPath: '/javascript/',
        quiet: false,
        historyApiFallback: true
    });

    devServer.listen(PORT, HOST, function(err) {
        if (err) {
            throw new Util.PluginError('webpack-dev-server', err);
        }
        cb();
    });
});

Gulp.task('watch', ['watch:local']);
Gulp.task('serve', ['webpack-dev-server'], function () {
    log('[serve]', 'http://' + HOST + ':' + PORT);
});
Gulp.task('build', ['templates', 'build:common']);
Gulp.task('deploy', ['s3-deploy']);
